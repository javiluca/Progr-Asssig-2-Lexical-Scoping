
## This function creates a special R object that 
## 1. Initializes a variable 'm' 
##    (which will be used to save inverse matrix latter, i.e. a cached data);
## 2. Provides function get() to obtain "raw" matrix (of which one needs to find 
##    its inverse);
## 3. Provides function setImatrix() to assign computed inverse matrix (of x) to m;
## 4. Provides function getImatrix() to obtain the cached inverse matrix.

makeCacheMatrix <- function(x = matrix()) {
# set the value of the matrix
  m<-NULL
  set<-function(y){
  x<<-y
  m<<-NULL
}
#get the value of the matrix
get<-function() x

# setting of inverse of the matrix
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m

#get the inverse of the matrix
list(set=set, get=get,
   setmatrix=setmatrix,
   getmatrix=getmatrix)
}

# This function does the actual inversing of matrix x.  It first checks if the inverse matrix has been found; 
# if yes, returns the result and quits. If not, the inverse of x is calculated, saved to cached, and returned.
## NOTE: argument x for this function must be cached, i.e. a list returned from calling makeCacheMatrix(x).

cacheSolve <- function(x=matrix(), ...) {
    m<-x$getmatrix()
    if(!is.null(m)){
      message("getting cached data")
      return(m)
    }
    matrix<-x$get
    m<-solve(matrix, ...)
    x$setmatrix(m)
    m
}
